<?php

class AutoData extends \Wei\Base{
	
	public function getAutoData($auto_id, $req_params = array()){
		$file = $this->getCacheFile($auto_id);

		$func = include($file);

		return $func($req_params);
	}

	public function callUserFunc($str, $data = array()){
		if(strstr($str, '::')){
			
			list($class, $method) = explode('::', $str);
			
			if($class && $method){
				if(class_exists($class)){
					$obj = new $class;
					if(method_exists($obj, $method)){
						call_user_func_array(array($obj, $method), array($data));
					}
				}
			}
		}else{
			if(function_exists($str)){
				call_user_func_array($str, array($data));
			}
		}
	}

	public function getCacheFile($auto_id){
		return BASE_PATH . 'cache/autodata/' . $auto_id . '.php';
	}
	
	private function paramsToArray($params){
		
		if(!$params){
			return array();
		}
		
		$params = json_decode($params, true);
		if(count($params) > 0){
			foreach($params as &$param){
				if($param['args'] !== ''){
					$param['args'] = explode(',', $param['args']);
				}else{
					$param['args'] = array();
				}
			}
			unset($param);
			
			return $params;
		}
		
		return array();
	}
	
	public function genCacheFileByRowData($row){
		if(isset($row['auto_id'])){
			$this->genCacheFile($row['auto_id']);
		}else{
			$this->genCacheFile($row['id']);
		}
	}

	// 为此autodata生成缓存文件
	// /cache/autodata/111.php
	// 格式： <?php return array();
	public function genCacheFile($auto_id = 0){
		
		if($auto_id < 1){
			return false;
		}
		
		$autodata = wei()->db->select('ap_auto_autodata', array('id' => $auto_id));

		if(!$autodata){
			return false;
		}
		
		/*
		$autodata['auto_params'] = $this->paramsToArray($autodata['auto_params']);

		$validateCode = '';
		if(!empty($autodata['auto_params'])){
			foreach($autodata['auto_params'] as $vals){
				$validateCode .= wei()->autovalidate->getPhpCode($vals);
				$validateCode .= "\r\n\r\n";
			}
		}*/
		
		$validateCode = '';
		
		$params = wei()->db->selectAll('ap_auto_autodata_param', array('auto_id' => $auto_id));
		if($params){
			foreach($params as $param){
				$validateCode .= wei()->autovalidate->getPhpCode($param);
				$validateCode .= "\r\n\r\n";
			}
		}

		$items = wei()->db->selectAll('ap_auto_autodata_item', array('auto_id' => $auto_id));

		$autophp_query_placeholder = '';

		$phpData = '<?php' . "\r\n\r\n//generated by AutoPHP ".AUTOPHP_VERSION . ' @' .date('Y-m-d H:i:s')."\r\n\r\n";
		$phpData .= 'return function($params = array()){'."\r\n\r\n";
		$phpData .= $validateCode;
		$phpData .= "{autophp_query_placeholder}\r\n\r\n";
		$phpData .= "\treturn array('ret' => 0, 'data' => array(\r\n";

		foreach($items as $item){
			if($item['datasource_type'] == AUTODATA_DATESOURCE_PAINTEXT){
				
				$tmpv = '$ap_'.random(8);
				${$tmpv} = $item['datasource_param'];
				
				if($params){
					foreach($params as $vals){
						if(strstr($item['datasource_param'], '{'.$vals['query_name'].'}')){
							$item['datasource_param'] = str_replace('{'.$vals['query_name'].'}', '$params[\''.$vals['query_name'].'\']', $item['datasource_param']);
						
							$autophp_query_placeholder .= "\t".$tmpv.' = str_replace(\'{'.$vals['query_name'].'}\', $params[\''.$vals['query_name'].'\'], \''.${$tmpv}.'\');' . "\r\n";
						}
					}
				}else{
					$autophp_query_placeholder .= "\t".$tmpv.' = \''.${$tmpv}.'\';' . "\r\n";
				}
				$phpData .= "\t\t'".$item['data_name']."' => addslashes(".$tmpv."),\r\n";
			}elseif($item['datasource_type'] == AUTODATA_DATESOURCE_JSONTEXT){
				$array = json_decode($item['datasource_param'], true);
				if($array){
					$arrayStr = var_export($array, true);
					$phpData .= "\t\t'".$item['data_name']."' => ".$arrayStr.",\r\n";
				}
			}elseif($item['datasource_type'] == AUTODATA_DATESOURCE_DBQUERY){
				$autophp_query_placeholder .= "\t".'$rows_'.$item['data_name'].' = wei()->db->fetchAll(\''.$item['datasource_param']."');\r\n";
				$phpData .= "\t\t'".$item['data_name'].'\' => $rows_'.$item['data_name'].",\r\n";
			}elseif($item['datasource_type'] == AUTODATA_DATESOURCE_CLASSMETHOD){
				$autophp_query_placeholder .= "\r\n";
			}
		}

		$phpData = str_replace('{autophp_query_placeholder}', $autophp_query_placeholder, $phpData);
		$phpData .= "\t".'));'."\r\n";
		$phpData .= '}'. "\r\n\r\n";
		$phpData .= '?>';

		$file = $this->getCacheFile($auto_id);

		file_put_contents($file, $phpData);

		return true;
	}
}
